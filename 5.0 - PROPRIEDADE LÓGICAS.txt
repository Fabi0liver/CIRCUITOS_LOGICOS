                                      PROPRIEDADE LÓGICAS


 Imagine que o mundo digital funcione como um grande quebra-cabeça onde todas as peças precisam se encaixar 
perfeitamente para que a tecnologia, desde smartphones até supercomputadores, opere de forma eficiente. Nesse 
contexto, as propriedades lógicas são como regras fundamentais que organizam essas peças, garantindo que as 
operações lógicas aconteçam corretamente. Quando engenheiros ou programadores projetam um sistema ou código, eles 
se baseiam nessas regras para otimizar processos, reduzir desperdícios e aumentar a eficiência.

 Pense, por exemplo, em como organizamos tarefas no dia a dia: se precisamos limpar a casa, fazer compras e ainda 
ir ao banco, a ordem e a maneira como executamos essas tarefas podem simplificar ou complicar o processo. As 
propriedades lógicas funcionam de maneira semelhante. Elas nos permitem organizar operações digitais da maneira 
mais eficiente, eliminando redundâncias e garantindo que o sistema funcione de forma otimizada. Esse tipo de 
abordagem não só economiza tempo, mas também poupa recursos, tanto no software quanto no hardware.

 Outra analogia útil seria o funcionamento de um time de futebol. Cada jogador tem uma função específica, e o time 
precisa trabalhar em conjunto para marcar gols. As propriedades lógicas são como as regras do jogo — elas definem 
como cada jogador (ou operação) deve se comportar, e se o time seguir essas regras, o resultado será um jogo mais 
fluido e eficiente. Quando entendemos essas propriedades, conseguimos não só evitar erros, mas também explorar 
melhor as ferramentas à nossa disposição.

 Agora que entendemos a importância de seguir certas regras para organizar nosso raciocínio, vamos nos aprofundar 
nas propriedades lógicas. Elas são a base para otimizar processos, simplificar circuitos e criar sistemas digitais 
inteligentes. Estas propriedades serão como uma caixa de ferramentas para resolver problemas mais complexos de 
maneira eficiente. Vamos explorar como cada uma delas funciona e por que são tão essenciais para o mundo digital.


* Propriedade Comutativa:

  A Propriedade Comutativa afirma que a ordem dos operandos em uma expressão lógica não altera o resultado final,  
 tanto para operações de AND (representada como uma multiplicação lógica) quanto para operações de OR (adição 
 lógica). Em outras palavras, se você trocar a ordem dos valores ou variáveis envolvidos, o resultado permanecerá  
 o mesmo. Isso acontece porque, nas portas lógicas, o importante é o estado final dos valores e não a sequência em 
 que eles são processados.

  Nas portas AND, a operação só resulta em 1 (verdadeiro) quando todos os operandos são 1. Se algum deles for 0, o 
 resultado é 0 (falso). Já nas portas OR, basta que um dos operandos seja 1 para que o resultado seja 1; o único 
 cenário em que o resultado será 0 é quando todos os operandos forem 0. Sendo assim, o efeito da comutatividade 
 pode ser visualizado ao reorganizarmos os valores de entrada em uma dessas portas: o resultado final se mantém 
 inalterado, independentemente da ordem de entrada.

   - AND: A · B = B · A

   - OR:  A + B = B + A

  Imagine que você está preparando um bolo. Você tem todos os ingredientes prontos: farinha, açúcar, manteiga, 
 etc. Agora, não importa se você mistura o açúcar antes da farinha ou se coloca a farinha antes do açúcar — o bolo 
 final será o mesmo. Isso porque o resultado não depende da sequência dos ingredientes, mas da combinação final 
 deles. Da mesma forma, na lógica digital, as operações AND e OR seguem essa regra de "mistura" das variáveis: a 
 ordem das entradas não altera o resultado final.

  Essa ideia pode ser aplicada também à matemática básica: na adição simples, 2 + 3 é o mesmo que 3 + 2. O mesmo 
 princípio se aplica às portas lógicas, onde podemos "trocar" as entradas sem preocupar com o impacto no  
 resultado.

   - Exemplo: Vamos imaginar que temos dois interruptores, A e B, que controlam uma lâmpada. Se os interruptores 
             estão ligados em uma configuração AND, a lâmpada só acenderá se ambos os interruptores estiverem na 
             posição "ligada" (ou seja, ambos forem 1). Aqui, a ordem em que acionamos os interruptores não 
             importa — se ativarmos A antes de B, ou B antes de A, o resultado será o mesmo. O que importa é que 
             ambos estejam ligados ao mesmo tempo.
        
              Por outro lado, se esses interruptores estiverem configurados em uma porta OR, a lâmpada acenderá se 
             qualquer um dos interruptores for ativado. Novamente, a ordem em que pressionamos A ou B não faz 
             diferença: se um deles for acionado, a lâmpada acenderá. Se apenas um interruptor for ligado, o 
             resultado será 1 (luz acesa), e se os dois forem desligados, o resultado será 0 (luz apagada). A 
             operação OR, assim como a AND, respeita a propriedade comutativa: não importa a ordem dos 
             interruptores, o resultado final será o mesmo.

  A Propriedade Comutativa é uma das fundações da lógica digital. Embora pareça simples, ela desempenha um papel   
 vital na organização de expressões lógicas. Ela nos dá a flexibilidade de reordenar os operandos sem alterar o 
 resultado final, o que facilita bastante o trabalho de projetar e simplificar circuitos lógicos.


* Propriedade Associativa:

  A Propriedade Associativa afirma que a forma como agrupamos os operandos em uma expressão lógica não altera o 
 resultado final, tanto para operações de AND (multiplicação lógica) quanto para operações de OR (adição lógica). 
 Em outras palavras, se você alterar a posição dos parênteses em uma expressão que envolve três ou mais operandos, 
 o resultado permanecerá o mesmo. Isso acontece porque, nas portas lógicas, o importante é a relação final entre 
 os valores, e não a maneira como eles são agrupados.

  Nas portas AND, a operação só resulta em 1 (verdadeiro) quando todos os operandos são 1. Se algum deles for 0, o 
 resultado é 0 (falso). Já nas portas OR, basta que um dos operandos seja 1 para que o resultado seja 1; o único 
 cenário em que o resultado será 0 é quando todos os operandos forem 0. Sendo assim, o efeito da associatividade 
 pode ser visualizado ao reestruturarmos os parênteses em uma expressão: o resultado final se mantém inalterado, 
 independentemente de como agrupamos as variáveis.

   - AND: (A · B) · C = A · (B · C)

   - OR:  (A + B) + C = A + (B + C)

  Imagine que você está preparando uma salada de frutas. Você tem todas as frutas cortadas: maçã, banana, e 
 morango. Agora, não importa se você mistura a maçã com a banana primeiro e depois adiciona o morango, ou se você 
 mistura o morango com a banana antes de juntar a maçã — a salada final será a mesma. Isso porque o resultado 
 final não depende da sequência em que você combina as frutas, mas da mistura completa. Da mesma forma, na lógica 
 digital, as operações AND e OR seguem essa regra de "combinação" de variáveis: o agrupamento das entradas não 
 altera o resultado final.

  Essa ideia pode ser aplicada também à matemática básica: na adição simples, (2 + 3) + 4 é o mesmo que 
 2 + (3 + 4). O mesmo princípio se aplica às portas lógicas, onde podemos "reagrupar" as entradas sem nos  
 preocupar com o impacto no resultado.

   - Exemplo: Vamos imaginar que temos três interruptores, A, B e C, que controlam uma lâmpada. Se os 
             interruptores estão ligados em uma configuração AND, a lâmpada só acenderá se todos os interruptores 
             estiverem na posição "ligada" (ou seja, todos forem 1). Aqui, o agrupamento de quais interruptores 
             verificamos primeiro não importa — se testarmos (A e B) antes de C, ou A antes de (B e C), o 
             resultado será o mesmo. O que importa é que todos estejam ligados ao mesmo tempo.


              Por outro lado, se esses interruptores estiverem configurados em uma porta OR, a lâmpada acenderá se 
             qualquer um dos interruptores for ativado. Novamente, a forma como agrupamos A, B e C não faz 
             diferença: se pressionarmos A, B ou C em qualquer ordem, o resultado será 1 (luz acesa). A operação 
             OR, assim como a AND, respeita a propriedade associativa: não importa como agrupamos os 
             interruptores, o resultado final será o mesmo.

  A Propriedade Associativa é uma das fundações da lógica digital. Embora pareça simples, ela desempenha um papel 
 crucial na organização de expressões lógicas. Ela nos dá a flexibilidade de reagrupar os operandos sem alterar o 
 resultado final, o que facilita o projeto e simplificação de circuitos lógicos.


- Propriedade Distributiva:

  A Propriedade Distributiva afirma que uma operação lógica aplicada a um conjunto de operandos pode ser 
 distribuída entre eles. Essa propriedade é fundamental tanto para operações de AND (representada como 
 multiplicação lógica) quanto para operações de OR (adição lógica). Em outras palavras, se você tiver uma 
 expressão que combine AND e OR, pode "distribuir" uma operação em relação à outra sem alterar o resultado final.

  Nas portas lógicas, essa propriedade se revela claramente quando observamos que a combinação de entradas pode 
 ser reorganizada. Por exemplo, na operação AND, se você tem uma variável A combinada com uma operação OR, você 
 pode distribuir A sobre os operandos da operação OR. Assim, o resultado final será o mesmo, independentemente da 
 forma como as operações são organizadas.

   - A · (B + C) = (A · B) + (A · C)

   - A + (B · C) = (A + B) · (A + C)

  Imagine que você está preparando um molho para a sua salada. Você tem azeite, vinagre e temperos prontos. Agora, 
 não importa se você mistura o azeite com o vinagre primeiro e depois adiciona os temperos, ou se você mistura o 
 azeite com os temperos antes de adicionar o vinagre — o resultado final será o mesmo. Isso porque a combinação 
 dos ingredientes, quando misturados, resulta em um molho saboroso, independente da ordem em que foram 
 adicionados. Da mesma forma, na lógica digital, as operações AND e OR seguem essa regra de "distribuição" das  
 variáveis: a forma como combinamos as operações não altera o resultado final.

  Essa ideia também pode ser aplicada à matemática básica: na multiplicação, 2 × (3 + 4) é o mesmo que (2 × 3) +  
 (2 × 4). O mesmo princípio se aplica às portas lógicas, onde podemos "distribuir" uma operação em relação a  
 outras sem nos preocupar com o impacto no resultado.

   - Exemplo: Vamos imaginar que temos dois interruptores, A e B, que controlam uma lâmpada. Se os interruptores 
             estão ligados em uma configuração AND com uma operação OR envolvendo um terceiro interruptor C, a 
             lâmpada só acenderá se A estiver ligado e B ou C estiverem também. Aqui, podemos ver que podemos 
             distribuir a operação AND: A · (B + C) se torna (A · B) + (A · C). O que importa é que a combinação 
             final dos interruptores resulta na lâmpada acesa.

  A Propriedade Distributiva é uma das fundações da lógica digital. Embora pareça simples, ela desempenha um papel 
 vital na organização de expressões lógicas. Ela nos dá a flexibilidade de redistribuir as operações sem alterar o 
 resultado final, o que facilita bastante o trabalho de projetar e simplificar circuitos lógicos.


- Propriedade de Identidade:

  A Propriedade de Identidade afirma que, ao combinar uma variável lógica com um valor de identidade, o resultado 
 final permanece inalterado. Para as operações lógicas, temos duas propriedades de identidade: para a operação 
 AND, o valor de identidade é 1, e para a operação OR, o valor de identidade é 0. Em outras palavras, quando você 
 combina uma variável lógica com 1 em uma operação AND, o resultado será sempre a própria variável. Da mesma 
 forma, quando você combina uma variável lógica com 0 em uma operação OR, o resultado também será a própria 
 variável. Isso acontece porque, nas portas lógicas, o valor de identidade mantém o estado da variável envolvida, 
 sem alterá-lo.

   - AND: A · 1 = A

   - OR:  A + 0 = A

  Imagine que você está preparando um bolo. Você tem todos os ingredientes prontos: farinha, açúcar, manteiga,  
 etc. Agora, se você adicionar a manteiga (que representa o valor de identidade na operação AND) ao bolo, o 
 resultado ainda será a mistura dos outros ingredientes — a manteiga não altera a receita. Da mesma forma, na 
 lógica digital, as operações AND e OR respeitam essa regra de identidade: a presença de um valor de identidade 
 não modifica o resultado final.

  Essa ideia pode ser aplicada também à matemática básica: na adição simples, 5 + 0 é o mesmo que 5. O mesmo 
 princípio se aplica às portas lógicas, onde podemos combinar uma variável com seu valor de identidade sem 
 preocupar com o impacto no resultado.

   - Exemplo: Vamos imaginar que temos dois interruptores, A e B, que controlam uma lâmpada. Se os interruptores 
             estão ligados em uma configuração AND, a lâmpada só acenderá se ambos os interruptores estiverem na 
             posição "ligada" (ou seja, ambos forem 1). Agora, se A estiver ligado e B for 1 (o valor de 
             identidade), a lâmpada ainda acenderá porque A já garante o resultado. Aqui, a presença de B não 
             influencia o resultado — o que importa é que A esteja ligado.

              Por outro lado, se esses interruptores estiverem configurados em uma porta OR, a lâmpada acenderá se 
             qualquer um dos interruptores for ativado. Se A estiver ligado e B for 0 (o valor de identidade), a 
             lâmpada também acenderá porque A garante o resultado. Novamente, a presença de B não faz diferença: 
             se A estiver ligado, o resultado será 1 (luz acesa), independentemente do estado de B. A operação OR, 
             assim como a AND, respeita a propriedade de identidade: o valor de identidade não altera o resultado 
             final.

  A Propriedade de Identidade é uma das fundações da lógica digital. Embora pareça simples, ela desempenha um   
 papel vital na organização de expressões lógicas. Ela nos dá a certeza de que a presença de um valor de 
 identidade não muda o resultado final, o que facilita bastante o trabalho de projetar e simplificar circuitos  
 lógicos.


- Propriedade de Complemento:

  A Propriedade de Complemento afirma que a combinação de um valor lógico e seu complemento resulta sempre em
 1 (verdadeiro). Em outras palavras, para qualquer variável lógica A, se você combinar A com seu complemento 
 (representado como A'), o resultado será 1. Essa propriedade é fundamental em lógica digital, pois estabelece que 
 um estado e seu oposto sempre cobrem todas as possibilidades.

  Nas portas lógicas, essa propriedade é evidenciada em operações de AND e OR. Quando você tem uma porta AND, a 
 operação resultará em 0 (falso) se pelo menos um dos operandos for 0, enquanto em uma porta OR, a operação 
 resultará em 1 (verdadeiro) se pelo menos um dos operandos for 1. Assim, o efeito da Propriedade de Complemento 
 pode ser visualizado ao considerar que a combinação de um valor e seu oposto sempre resulta em verdadeiro.

   - AND: A · A' = 0

   - OR:  A + A' = 1

  Imagine que você está preparando um bolo e decide adicionar sal. Agora, não importa se você mistura o sal antes  
 ou depois do açúcar — o bolo final terá um sabor salgado se você adicionar sal a qualquer momento. Isso porque o 
 resultado não depende da sequência dos ingredientes, mas da presença do sal no bolo. Da mesma forma, na lógica 
 digital, a operação entre uma variável e seu complemento é como garantir que todos os sabores estejam presentes, 
 resultando em um resultado definitivo.

  Essa ideia também pode ser aplicada à matemática básica: se você tem um número e subtrai esse mesmo número, o  
 resultado é sempre zero. O mesmo princípio se aplica às portas lógicas, onde podemos combinar uma entrada com seu 
 complemento para garantir um resultado claro.

   - Exemplo: Vamos imaginar que temos dois interruptores, A e A', que controlam uma lâmpada. Se os interruptores 
             estão ligados em uma configuração AND, a lâmpada nunca acenderá, pois sempre haverá um estado em que 
             pelo menos um dos interruptores estará desligado (ou seja, 0). Aqui, a combinação de um valor e seu 
             complemento resulta em 0 (luz apagada).

              Por outro lado, se esses interruptores estiverem configurados em uma porta OR, a lâmpada acenderá 
             independentemente de qual interruptor for ativado, pois sempre que um deles estiver ligado, o 
             resultado será 1 (luz acesa). A operação OR, assim como a AND, respeita a Propriedade de Complemento: 
             quando você combina uma variável com seu complemento, o resultado final será sempre 1.

  A Propriedade de Complemento é uma das fundações da lógica digital. Embora pareça simples, ela desempenha um 
 papel vital na organização de expressões lógicas. Ela nos fornece a certeza de que a presença de um valor e seu 
 oposto cobrirão todas as possibilidades, o que facilita bastante o trabalho de projetar e simplificar circuitos 
 lógicos.

  
- Propriedade de Anulação:

  A Propriedade de Anulação afirma que, em uma expressão lógica, a presença de um valor específico pode determinar 
 o resultado final, tanto para operações de AND (representada como uma multiplicação lógica) quanto para operações 
 de OR (adição lógica). Em outras palavras, se você tiver um valor que anula a operação, o resultado permanecerá o 
 mesmo. Isso acontece porque, nas portas lógicas, o importante é como um determinado valor pode influenciar a 
 operação final.

  Nas portas AND, a operação só resulta em 1 (verdadeiro) quando todos os operandos são 1. Se algum deles for 0, o 
 resultado é 0 (falso). Já nas portas OR, basta que um dos operandos seja 1 para que o resultado seja 1; o único 
 cenário em que o resultado será 0 é quando todos os operandos forem 0. Sendo assim, o efeito da anulação pode ser 
 visualizado ao introduzirmos os valores em uma dessas portas: um 0 em uma operação AND tornará o resultado final 
 0, enquanto um 1 em uma operação OR garantirá que o resultado final seja 1.

   - AND: A · 0 = 0 (A anula o resultado)

   - OR:  A + 1 = 1 (1 anula o resultado)

  Imagine que você está preparando um bolo. Você tem todos os ingredientes prontos: farinha, açúcar, manteiga, 
 etc. Agora, se você decidir não colocar açúcar (equivalente a um 0 em uma operação AND), o bolo não ficará doce, 
 independentemente da quantidade de outros ingredientes. Isso porque a ausência do açúcar (0) anula o resultado 
 final. Da mesma forma, na lógica digital, a operação AND respeita essa regra de anulação: um valor de entrada de 
 0 anula a operação.

  Essa ideia pode ser aplicada também à matemática básica: na multiplicação simples, 5 × 0 é o mesmo que 0. O 
 mesmo princípio se aplica às portas lógicas, onde a presença de um valor que anula a operação influencia 
 diretamente o resultado.

   - Exemplo: Vamos imaginar que temos dois interruptores, A e B, que controlam uma lâmpada. Se os interruptores 
             estão ligados em uma configuração AND, a lâmpada só acenderá se ambos os interruptores estiverem na 
             posição "ligada" (ou seja, ambos forem 1). Aqui, se um dos interruptores estiver desligado (0), a  
             lâmpada não acenderá. O que importa é que a presença de um 0 anula a possibilidade de acender a luz.

              Por outro lado, se esses interruptores estiverem configurados em uma porta OR, a lâmpada acenderá se 
             qualquer um dos interruptores for ativado. Nesse caso, se um dos interruptores estiver ligado (1), a 
             lâmpada acenderá independentemente do estado do outro. Se apenas um interruptor for ligado, o 
             resultado será 1 (luz acesa), e se ambos forem desligados, o resultado será 0 (luz apagada). A 
             operação OR, assim como a AND, respeita a propriedade de anulação: um 1 na operação OR garante que a 
             lâmpada acenda.

  A Propriedade de Anulação é uma das fundações da lógica digital. Embora pareça simples, ela desempenha um papel 
 vital na organização de expressões lógicas. Ela nos dá a certeza de que certos valores, quando presentes, definem 
 resultados fixos, o que facilita bastante o trabalho de projetar e simplificar circuitos lógicos.


- A Propriedade de Idempotência afirma que aplicar uma operação lógica a um valor com ele mesmo não altera o 
 resultado final, tanto para operações de AND (representada como uma multiplicação lógica) quanto para operações 
 de OR (adição lógica). Em outras palavras, combinar um valor lógico consigo mesmo em uma porta AND ou OR sempre 
 resulta no próprio valor. Isso acontece porque, na lógica digital, o comportamento de um valor combinado consigo 
 mesmo é sempre previsível e direto.

  Nas portas AND, a operação entre um valor e ele mesmo sempre resulta no próprio valor. Por exemplo, se tivermos 
 A · A (A AND A), o resultado será A, pois não há outro valor para influenciar o resultado. Já nas portas OR, o 
 mesmo princípio se aplica: A + A (A OR A) também resultará em A, já que não há outra variável para mudar o 
 resultado. Portanto, na Propriedade de Idempotência, podemos simplificar expressões lógicas removendo duplicações 
 de variáveis, o que ajuda a otimizar circuitos.

   - AND: A · A = A

   - OR:  A + A = A

  Imagine que você está preenchendo um formulário online e já preencheu o campo "nome" com seu nome. Se você 
 tentar colocar seu nome de novo no mesmo campo, o sistema não precisa registrar a nova entrada, pois ela é 
 exatamente igual à anterior. Da mesma forma, na lógica digital, não faz sentido "repetir" a mesma variável várias 
 vezes em uma expressão, pois o resultado será sempre o mesmo. O sistema "entende" que uma repetição desnecessária 
 não altera o resultado final.

  Esse conceito também pode ser comparado à matemática: ao multiplicar um número por ele mesmo em determinadas 
 circunstâncias, como no caso da idempotência, o valor final continua o mesmo. Na lógica digital, o princípio é 
 semelhante — repetir variáveis não altera o comportamento do circuito.

   - Exemplo: Imagine que você tem dois interruptores, mas, por algum motivo, ambos controlam a mesma lâmpada e 
             estão sempre na mesma posição. Se esses interruptores estiverem configurados em uma porta 
             AND (A AND A), o resultado será sempre igual ao valor do interruptor — se estiverem ambos na posição 
             "ligada", a lâmpada acenderá; se estiverem ambos desligados, a lâmpada ficará apagada. Aqui, a 
             idempotência garante que o resultado é o mesmo, independentemente da "duplicação" dos interruptores.

              Da mesma forma, se os interruptores estiverem configurados em uma porta OR (A OR A), o comportamento 
             será o mesmo. Se um interruptor estiver ligado, o resultado será 1 (lâmpada acesa), e se ambos 
             estiverem desligados, o resultado será 0 (lâmpada apagada). A idempotência simplifica essas operações 
             ao eliminar repetições de variáveis desnecessárias.

 A Propriedade de Idempotência é uma das fundações da lógica digital. Embora pareça simples, ela desempenha um 
papel importante na simplificação de expressões lógicas. Ao garantir que combinar um valor consigo mesmo não 
altera o resultado, essa propriedade ajuda a tornar os circuitos mais eficientes, removendo duplicações 
desnecessárias e permitindo que as operações sejam mais enxutas e rápidas.


- Propriedade de Involução: 

  A Propriedade de Involução afirma que, ao aplicar uma operação de negação (NOT) duas vezes a uma variável ou 
 valor, o resultado final será o próprio valor original. Em outras palavras, negar uma negação traz o valor de 
 volta ao estado inicial. Isso acontece porque a primeira negação inverte o valor, mas a segunda negação reverte o 
 valor de volta ao seu estado original. Portanto, aplicar o operador NOT duas vezes consecutivas é o mesmo que não 
 aplicá-lo.

  Quando usamos a porta NOT em uma variável, ela inverte o valor da entrada. Se a entrada for 1, o resultado será 
 0, e se a entrada for 0, o resultado será 1. Mas, se aplicarmos duas portas NOT em sequência, o resultado voltará 
 a ser o valor inicial da entrada.

   - NOT NOT A = A

  Imagine que você está organizando os ingredientes para fazer um bolo e, por engano, coloca um ingrediente 
 errado. Você então remove esse ingrediente errado e coloca o certo novamente. Ao final, a situação voltou ao 
 ponto inicial, com todos os ingredientes corretos. Da mesma forma, aplicar a negação duas vezes (primeiro 
 colocando algo "errado", depois corrigindo) resulta no valor original.

  Essa ideia pode ser aplicada também em outras áreas: pense em um interruptor de luz. Se você desligá-lo (negar 
 seu estado de ligado), a luz apagará. Mas, se você ligar o interruptor novamente (negar a negação), a luz 
 acenderá de novo. O estado final da lâmpada (acesa) é o mesmo que o estado original. Esse é o conceito de 
 involução na lógica digital.

   - Exemplo: Vamos imaginar que temos um interruptor A que controla uma lâmpada. Se o interruptor estiver na 
             posição "ligado" (valor 1), a lâmpada acende. Se aplicarmos uma negação (NOT), a lâmpada apaga (valor  
             0). Agora, se aplicarmos uma segunda negação (outra porta NOT), a lâmpada acende novamente, porque o 
             valor retorna ao estado original de 1.

              Aqui, a primeira negação inverte o valor, mas a segunda negação cancela essa inversão, restaurando o 
            valor inicial. Não importa quantas vezes você aplique a porta NOT duas vezes consecutivas — o 
            resultado será sempre o valor original da variável.

  A Propriedade de Involução é uma das fundações da lógica digital. Embora pareça simples, ela desempenha um papel 
 importante ao garantir que valores possam ser invertidos e restaurados sem perda de informação. Essa propriedade 
 nos dá a confiança de que podemos usar a negação de maneira controlada e previsível, o que facilita o design de  
 circuitos e expressões lógicas.


- Propriedade de Absorção:

  A Propriedade de Absorção afirma que, em uma expressão lógica, certos termos podem ser "absorvidos" por outros, 
 simplificando a expressão sem alterar seu resultado final. Isso acontece porque, em portas lógicas, algumas 
 combinações de variáveis fazem com que uma das variáveis domine a operação, eliminando a necessidade de outras.

  Na prática, isso significa que uma variável combinada com uma operação AND ou OR com uma expressão que contém 
 ela mesma resulta na própria variável. Ou seja, a variável "absorve" a expressão que contém ela mesma, tornando-a 
 redundante. Essa propriedade ajuda a simplificar circuitos lógicos, eliminando operações desnecessárias.

  Nas portas AND, se uma variável A é combinada com a operação OR de si mesma com outra variável B, o resultado 
 será A. Da mesma forma, nas portas OR, se a variável A é combinada com a operação AND de si mesma com outra 
 variável B, o resultado também será A. Isso ocorre porque a variável A "absorve" a expressão maior, tornando-a 
 irrelevante para o resultado final.

   - AND: A · (A + B) = A

   - OR:  A + (A · B) = A

  Imagine que você está organizando um evento. Se você já decidiu que vai preparar uma refeição com arroz, e a 
 segunda opção é arroz com feijão, não faz muita diferença incluir a opção "arroz com feijão" — o arroz já está 
 garantido de qualquer forma! Na lógica digital, isso acontece quando uma variável aparece tanto de forma 
 independente quanto em combinação com outra: o resultado final depende apenas dela.

  Essa ideia também se aplica à simplificação de expressões matemáticas e lógicas: quando um termo domina a 
 equação, outros se tornam redundantes. No caso da lógica digital, a Propriedade de Absorção nos ajuda a reduzir 
 complexidade e a otimizar a construção de circuitos.

   - Exemplo: Imagine que temos uma lâmpada controlada por dois interruptores, A e B. Se esses interruptores 
             estiverem ligados em uma configuração AND, e se A estiver sempre ligado, não importa o estado de B — 
             a lâmpada estará sempre acesa enquanto A estiver ativado. Neste caso, podemos "absorver" a influência 
             de B, já que A sozinho é suficiente para determinar o resultado. Portanto, A · (A + B) = A.

               Da mesma forma, em uma configuração OR, se o interruptor A estiver sempre ligado, mesmo que B 
             esteja em uma configuração com AND, o resultado não mudará. Isso porque a presença de A já garante 
             que a lâmpada estará acesa, então o efeito de B é absorvido. Portanto, A + (A · B) = A.

  A Propriedade de Absorção é uma ferramenta poderosa para simplificar expressões lógicas. Embora possa parecer 
 uma pequena otimização, ela é fundamental para garantir que sistemas lógicos operem de forma eficiente, 
 eliminando redundâncias e tornando o processo de construção e análise de circuitos mais simples e direto.
  

- Leis de De Morgan:

  Leis de De Morgan consiste em duas leis que descrevem como negar expressões lógicas compostas. Essas leis 
 permitem converter uma negação de uma expressão que envolve operações AND e OR em uma forma equivalente, usando a 
 operação oposta. Essencialmente, as Leis de De Morgan nos mostram como transformar a negação de uma conjunção 
 (AND) em uma disjunção (OR) e vice-versa. Isso é extremamente útil em lógica digital, pois permite simplificar 
 expressões e alterar circuitos para otimizar seu desempenho ou adaptar a lógica desejada.

  Em termos simples, essas leis ajudam a entender como a lógica funciona quando se inverte uma operação que 
 envolve múltiplas variáveis. Quando aplicamos a negação a uma expressão, não apenas "negamos" as variáveis 
 individualmente, mas também alteramos a operação lógica de AND para OR, ou de OR para AND.

  As duas leis de De Morgan podem ser escritas assim:

   - Negação do AND: A negação de uma operação AND entre duas variáveis (A e B) pode ser expressa como a negação   
                    individual das variáveis conectadas por uma operação OR:

                       * Lei 1: ¬(A · B) = ¬A + ¬B

   - Negação do OR: A negação de uma operação OR entre duas variáveis (A e B) pode ser expressa como a negação 
                   individual das variáveis conectadas por uma operação AND:

                       * Lei 2: ¬(A + B) = ¬A · ¬B

  Pense em como você organiza seus compromissos de lazer. Digamos que você tenha duas opções de diversão no final 
 de semana: ir ao cinema ou sair para jantar. Se você decide não fazer nenhuma dessas atividades, isso é o mesmo 
 que dizer que você não foi ao cinema e também não saiu para jantar. Esse é o efeito da primeira Lei de De Morgan 
 (negando um OR transforma em um AND). Agora, suponha que você tenha dois compromissos obrigatórios: arrumar a 
 casa e estudar. Se você decide não fazer ambos, isso significa que não arrumou a casa ou não estudou — isso 
 reflete a segunda Lei de De Morgan (negando um AND transforma em um OR).

  Essas leis são importantes porque oferecem uma maneira de reestruturar expressões lógicas e, ao mesmo tempo, 
 manter o comportamento da lógica original, o que facilita a construção de circuitos mais eficientes.

   - Exemplo: Imagine que temos dois interruptores, A e B, que controlam uma lâmpada. Se ambos os interruptores 
             estão ligados, a lâmpada acenderá (usando uma porta AND). Agora, se quisermos que a lâmpada não 
             acenda apenas se ambos os interruptores estiverem desligados, podemos aplicar a Lei 1 de De Morgan: 
             ¬(A · B) = ¬A + ¬B. Isso significa que a lâmpada apagará se pelo menos um dos interruptores estiver 
             desligado. Reestruturamos a expressão sem alterar o comportamento da lógica.

              Agora, se os interruptores estão configurados em uma porta OR (a lâmpada acenderá se pelo menos um 
             dos interruptores estiver ligado), a segunda Lei de De Morgan entra em cena. Se quisermos que a 
             lâmpada não acenda se nenhum dos interruptores estiver ligado, aplicamos a Lei 2 de De Morgan: ¬(A + 
             B) = ¬A · ¬B. Isso significa que a lâmpada só não acenderá quando ambos os interruptores estiverem 
             desligados.

  As Leis de De Morgan são ferramentas poderosas no arsenal da lógica digital. Embora possam parecer complicadas à 
 primeira vista, elas desempenham um papel crucial na reestruturação de expressões lógicas e na otimização de 
 circuitos. Assim como na vida cotidiana, onde a negação de uma decisão pode ser interpretada de maneiras 
 diferentes, essas leis nos ajudam a traduzir negações complexas de forma simples e eficiente.

  Essas leis também mostram que o mundo digital, assim como o mundo real, segue regras lógicas claras e 
 consistentes. Ao aprender a aplicar essas leis, desenvolvemos uma compreensão mais profunda sobre como projetar 
 sistemas eficientes, seja na criação de softwares, projetos eletrônicos ou outras áreas que envolvam lógica 
 computacional.

  

   